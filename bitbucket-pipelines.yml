# This is a sample build configuration for Go.
# Check our guides at https://confluence.atlassian.com/x/VYk8Lw for more examples.
# Only use spaces to indent your .yml configuration.
# -----
# You can specify a custom docker image from Docker Hub as your build environment.
image: golang:1.7.4-wheezy

pipelines:
  default:
    - step:
        script:
          # build and test the app
          - THEME_PACKAGE_PATH="${GOPATH}/src/bitbucket.org/${BITBUCKET_REPO_OWNER}/${BITBUCKET_REPO_SLUG}"
          - mkdir -pv "${THEME_PACKAGE_PATH}"
          - tar -cO --exclude-vcs --exclude=bitbucket-pipelines.yml . | tar -xv -C "${THEME_PACKAGE_PATH}"
          - cd "${THEME_PACKAGE_PATH}"
          - go get -u github.com/kardianos/govendor
          - govendor sync
          - go build -v
          - go test -v
          - ls -lR "${THEME_PACKAGE_PATH}" # list all items in path for debug purposes


  branches:
    dev:
      - step:
          script:
            # Update Apt
            - apt-get -y update
            
            # Define Vars
            - DEPLOYMENT_DIR="deployment"
            - THEMES_DIR="bslf"
            - GOCMS_BRANCH="project/bslf"
            - GOCMS_PACKAGE_PATH="${GOPATH}/src/github.com/menklab/goCMS"
            - THEME_PACKAGE_PATH="~/src/bitbucket.org/${BITBUCKET_REPO_OWNER}/${BITBUCKET_REPO_SLUG}"

            # install git dependencies
            - apt-get install -y git

            # install git dependencies
            - go get -u github.com/kardianos/govendor

            # install node dependencies
            - apt-get install -y build-essential checkinstall libssl-dev
            - curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh | bash
            - . ~/.bashrc
            - command -v nvm
            - nvm install 7
            - npm install -g brunch


          # build and test theme
            - mkdir -pv "${THEME_PACKAGE_PATH}"
            - tar -cO --exclude-vcs --exclude=bitbucket-pipelines.yml . | tar -xv -C "${THEME_PACKAGE_PATH}"
            - pushd "${THEME_PACKAGE_PATH}"
            - pwd
            - npm install
            - npm run build
            - ls -al ./dist
            - popd

            # build and test goCMS
            - mkdir -pv "${GOCMS_PACKAGE_PATH}"
            - git clone -b "${GOCMS_BRANCH}" https://github.com/menklab/goCMS.git "${GOCMS_PACKAGE_PATH}"
            - pushd "${GOCMS_PACKAGE_PATH}"
            - pwd
            - govendor sync
            - ls -alr
            - go build -v -o goCMS main.go
            - go test -v
            - popd

            # install dependencies for deploy
            - apt-get update # required to install zip
            - apt-get install -y zip python-pip # required for packaging up the application
            - pip install boto3==1.3.0 # required for beanstalk_deploy.py

            # create deployment package
            - ls -alR "${THEME_PACKAGE_PATH}" # list all items in path for debug purposes
            - ls -alR "${GOCMS_PACKAGE_PATH}" # list all items in path for debug purposes
            - mkdir -pv "${DEPLOYMENT_DIR}/content/themes/${THEMES_DIR}"
            - cp -r "${GOCMS_PACKAGE_PATH}"/goCMS "${GOCMS_PACKAGE_PATH}"/content "${DEPLOYMENT_DIR}"/.
            - cp -r "${THEME_PACKAGE_PATH}"/dist/* "${DEPLOYMENT_DIR}"/content/themes/"${THEMES_DIR}"/.
            - cp "${THEME_PACKAGE_PATH}"/Procfile "${DEPLOYMENT_DIR}"/.
            - pushd "${DEPLOYMENT_DIR}"
            - ls -alr
            - zip -r /tmp/artifact.zip ./* # package up the application for deployment
            - popd
            - python beanstalk_deploy.py # run the deployment script
